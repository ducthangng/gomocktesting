// Code generated by MockGen. DO NOT EDIT.
// Source: gomockt/model/repo (interfaces: BookRepository)

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	domain "gomockt/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBookRepository is a mock of BookRepository interface.
type MockBookRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBookRepositoryMockRecorder
}

// MockBookRepositoryMockRecorder is the mock recorder for MockBookRepository.
type MockBookRepositoryMockRecorder struct {
	mock *MockBookRepository
}

// NewMockBookRepository creates a new mock instance.
func NewMockBookRepository(ctrl *gomock.Controller) *MockBookRepository {
	mock := &MockBookRepository{ctrl: ctrl}
	mock.recorder = &MockBookRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookRepository) EXPECT() *MockBookRepositoryMockRecorder {
	return m.recorder
}

// EnableTx mocks base method.
func (m *MockBookRepository) EnableTx(arg0 func() error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableTx", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableTx indicates an expected call of EnableTx.
func (mr *MockBookRepositoryMockRecorder) EnableTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableTx", reflect.TypeOf((*MockBookRepository)(nil).EnableTx), arg0)
}

// InsertBook mocks base method.
func (m *MockBookRepository) InsertBook(arg0 domain.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBook", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBook indicates an expected call of InsertBook.
func (mr *MockBookRepositoryMockRecorder) InsertBook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBook", reflect.TypeOf((*MockBookRepository)(nil).InsertBook), arg0)
}

// QueryBook mocks base method.
func (m *MockBookRepository) QueryBook(arg0 string) ([]domain.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryBook", arg0)
	ret0, _ := ret[0].([]domain.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryBook indicates an expected call of QueryBook.
func (mr *MockBookRepositoryMockRecorder) QueryBook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryBook", reflect.TypeOf((*MockBookRepository)(nil).QueryBook), arg0)
}

// UpdateBook mocks base method.
func (m *MockBookRepository) UpdateBook(arg0 domain.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockBookRepositoryMockRecorder) UpdateBook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockBookRepository)(nil).UpdateBook), arg0)
}
